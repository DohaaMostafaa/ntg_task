// Mocks generated by Mockito 5.4.6 from annotations
// in ntg_task/test/features/cart/mocks/generate_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:ntg_task/features/cart/data/local/local_db.dart' as _i3;
import 'package:ntg_task/features/cart/domain/entities/cart_item.dart' as _i5;
import 'package:sqflite/sqflite.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabase_0 extends _i1.SmartFake implements _i2.Database {
  _FakeDatabase_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [LocalDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalDatabase extends _i1.Mock implements _i3.LocalDatabase {
  @override
  _i4.Future<_i2.Database> get database =>
      (super.noSuchMethod(
            Invocation.getter(#database),
            returnValue: _i4.Future<_i2.Database>.value(
              _FakeDatabase_0(this, Invocation.getter(#database)),
            ),
            returnValueForMissingStub: _i4.Future<_i2.Database>.value(
              _FakeDatabase_0(this, Invocation.getter(#database)),
            ),
          )
          as _i4.Future<_i2.Database>);

  @override
  _i4.Future<void> insertItem(_i5.CartItem? item) =>
      (super.noSuchMethod(
            Invocation.method(#insertItem, [item]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateItem(_i5.CartItem? item) =>
      (super.noSuchMethod(
            Invocation.method(#updateItem, [item]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteItem(int? productId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteItem, [productId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i5.CartItem>> getAllItems() =>
      (super.noSuchMethod(
            Invocation.method(#getAllItems, []),
            returnValue: _i4.Future<List<_i5.CartItem>>.value(<_i5.CartItem>[]),
            returnValueForMissingStub: _i4.Future<List<_i5.CartItem>>.value(
              <_i5.CartItem>[],
            ),
          )
          as _i4.Future<List<_i5.CartItem>>);

  @override
  _i4.Future<void> clearCart() =>
      (super.noSuchMethod(
            Invocation.method(#clearCart, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
